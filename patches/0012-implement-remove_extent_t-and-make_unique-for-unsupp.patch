From f9feab969edd537039471f8e0d4000a63eed0fd4 Mon Sep 17 00:00:00 2001
From: Jeffrey Clark <dude@zaplabs.com>
Date: Wed, 27 Jan 2016 10:34:36 -0600
Subject: [PATCH 12/12] implement remove_extent_t and make_unique for
 unsupported building

Signed-off-by: Jeffrey Clark <dude@zaplabs.com>
---
 scripts/genie.lua        | 47 ++++++++++++++++++++++++++++-------------------
 src/lib/util/corealloc.h |  7 +++++++
 src/lib/util/coretmpl.h  | 24 ++++++++++++++++++++++++
 3 files changed, 59 insertions(+), 19 deletions(-)

diff --git a/scripts/genie.lua b/scripts/genie.lua
index 316eebd..2a0eeac 100644
--- a/scripts/genie.lua
+++ b/scripts/genie.lua
@@ -705,23 +705,6 @@ if string.find(_OPTIONS["gcc"], "clang") and ((version < 30500) or (_OPTIONS["ta
 		"-x objective-c++",
 		"-std=c++1y",
 	}
-else
-	if _OPTIONS["targetos"]=="os2" then
-		buildoptions_cpp {
-			"-x c++",
-			"-std=gnu++14",
-		}
-	else
-		buildoptions_cpp {
-			"-x c++",
-			"-std=c++14",
-		}
-	end
-
-	buildoptions_objc {
-		"-x objective-c++",
-		"-std=c++14",
-	}
 end
 -- this speeds it up a bit by piping between the preprocessor/compiler/assembler
 	if not ("pnacl" == _OPTIONS["gcc"]) then
@@ -989,9 +972,35 @@ end
 			end
 		else
 			if (version < 40900) then
-				print("GCC version 4.9 or later needed")
-				os.exit(-1)
+				print("GCC version 4.9 or later needed, but trying anyway.")
+				buildoptions_cpp {
+					"-x c++",
+					"-std=c++11",
+				}
+				defines
+				{
+					"NOTCPP14",
+				}
+			else
+
+				if _OPTIONS["targetos"]=="os2" then
+					buildoptions_cpp {
+						"-x c++",
+						"-std=gnu++14",
+					}
+				else
+					buildoptions_cpp {
+						"-x c++",
+						"-std=c++14",
+					}
+				end
+
+				buildoptions_objc {
+					"-x objective-c++",
+					"-std=c++14",
+				}
 			end
+
 				buildoptions {
 					"-Wno-unused-result", -- needed for fgets,fread on linux
 					-- array bounds checking seems to be buggy in 4.8.1 (try it on video/stvvdp1.c and video/model1.c without -Wno-array-bounds)
diff --git a/src/lib/util/corealloc.h b/src/lib/util/corealloc.h
index 2c1df6d..83b0868 100644
--- a/src/lib/util/corealloc.h
+++ b/src/lib/util/corealloc.h
@@ -34,6 +34,13 @@
 #define global_free_array(_ptr)                     do { delete[] _ptr; } while (0)
 
 
+#if defined(__APPLE__) || defined(NOTCPP14)
+namespace std
+{
+	template<class T>
+	using remove_extent_t = typename remove_extent<T>::type;
+}
+#endif
 
 template<typename _Tp, typename... _Args>
 inline _Tp* global_alloc_clear(_Args&&... __args)
diff --git a/src/lib/util/coretmpl.h b/src/lib/util/coretmpl.h
index 9201041..c5474b5 100644
--- a/src/lib/util/coretmpl.h
+++ b/src/lib/util/coretmpl.h
@@ -17,6 +17,10 @@
 #include "corealloc.h"
 
 #include <vector>
+#if defined(__APPLE__) || defined(NOTCPP14)
+#include <memory>
+#include <type_traits>
+#endif
 
 #if defined(_MSC_VER) && (_MSC_VER < 1900)
 #include <yvals.h>
@@ -29,6 +33,26 @@
 #define assert(x) do { if (!(x)) { fprintf(stderr, "Assert: %s\n", #x); osd_break_into_debugger("Assertion failed"); } } while (0)
 #endif
 
+#if defined(__APPLE__) || defined(NOTCPP14)
+namespace std
+{
+	template <typename T, typename ... Args>
+	auto make_unique(Args&&... args)
+	-> typename std::enable_if<!std::is_array<T>::value,
+		std::unique_ptr<T>>::type
+	{
+		return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
+	}
+
+	template<class T>
+	auto make_unique(std::size_t size)
+	-> typename std::enable_if<std::is_array<T>::value,
+		std::unique_ptr<T>>::type
+	{
+		return std::unique_ptr<T>(new typename std::remove_extent<T>::type[size]());
+	}
+}
+#endif
 
 typedef std::vector<UINT8> dynamic_buffer;
 
-- 
2.4.3

