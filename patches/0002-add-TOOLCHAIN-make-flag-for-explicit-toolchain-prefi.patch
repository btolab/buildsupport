From e3022be03b2019b9f44e27cd8dea8bbf9659c609 Mon Sep 17 00:00:00 2001
From: Jeffrey Clark <dude@zaplabs.com>
Date: Mon, 2 Nov 2015 21:05:34 -0600
Subject: [PATCH 02/12] add TOOLCHAIN make flag for explicit toolchain prefix
 (cross compiling)

Signed-off-by: Jeffrey Clark <dude@zaplabs.com>
---
 makefile                | 20 ++++++++++++--------
 scripts/genie.lua       |  9 +++++++++
 scripts/src/osd/sdl.lua |  2 +-
 scripts/toolchain.lua   | 47 +++++++++++++++++++++++++++--------------------
 4 files changed, 49 insertions(+), 29 deletions(-)

diff --git a/makefile b/makefile
index c74627e..b38b540 100644
--- a/makefile
+++ b/makefile
@@ -75,6 +75,7 @@
 # BUILDDIR = build
 # TARGETOS = windows
 # CROSS_BUILD = 1
+# TOOLCHAIN =
 # OVERRIDE_CC = cc
 # OVERRIDE_CXX = c++
 # OVERRIDE_LD = ld
@@ -270,9 +271,9 @@ WINDRES  := $(MINGW32)/bin/windres
 endif
 else
 ifeq ($(ARCHITECTURE),_x64)
-WINDRES  := x86_64-w64-mingw32-windres
+WINDRES  := $(word 1,$(TOOLCHAIN) x86_64-w64-mingw32-)windres
 else
-WINDRES  := i686-w64-mingw32-windres
+WINDRES  := $(word 1,$(TOOLCHAIN) i686-w64-mingw32-)windres
 endif
 endif
 
@@ -406,6 +407,9 @@ endif
 
 PARAMS+= --distro=$(DISTRO)
 
+ifdef TOOLCHAIN
+PARAMS += --TOOLCHAIN='$(TOOLCHAIN)'
+endif
 ifdef OVERRIDE_CC
 PARAMS += --CC='$(OVERRIDE_CC)'
 ifndef CROSS_BUILD
@@ -776,12 +780,12 @@ endif
 
 ifeq ($(OS),windows)
 ifeq (posix,$(SHELLTYPE))
-GCC_VERSION      := $(shell $(subst @,,$(CC)) -dumpversion 2> /dev/null)
-CLANG_VERSION    := $(shell $(subst @,,$(CC)) --version 2> /dev/null| head -n 1 | grep clang | sed "s/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$$/\1/" | head -n 1)
+GCC_VERSION      := $(shell $(TOOLCHAIN)$(subst @,,$(CC)) -dumpversion 2> /dev/null)
+CLANG_VERSION    := $(shell $(TOOLCHAIN)$(subst @,,$(CC)) --version 2> /dev/null| head -n 1 | grep clang | sed "s/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$$/\1/" | head -n 1)
 PYTHON_AVAILABLE := $(shell $(PYTHON) --version > /dev/null 2>&1 && echo python)
 else
-GCC_VERSION      := $(shell $(subst @,,$(CC)) -dumpversion 2> NUL)
-CLANG_VERSION    := $(shell $(subst @,,$(CC)) --version 2> NUL| head -n 1 | grep clang | sed "s/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$$/\1/" | head -n 1)
+GCC_VERSION      := $(shell $(TOOLCHAIN)$(subst @,,$(CC)) -dumpversion 2> NUL)
+CLANG_VERSION    := $(shell $(TOOLCHAIN)$(subst @,,$(CC)) --version 2> NUL| head -n 1 | grep clang | sed "s/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$$/\1/" | head -n 1)
 PYTHON_AVAILABLE := $(shell $(PYTHON) --version > NUL 2>&1 && echo python)
 endif
 ifdef MSBUILD
@@ -798,9 +802,9 @@ MSBUILD_PARAMS += /p:Platform=win32
 endif
 endif
 else
-GCC_VERSION      := $(shell $(subst @,,$(CC)) -dumpversion 2> /dev/null)
+GCC_VERSION      := $(shell $(TOOLCHAIN)$(subst @,,$(CC)) -dumpversion 2> /dev/null)
 ifneq ($(OS),solaris)
-CLANG_VERSION    := $(shell $(subst @,,$(CC))  --version  2> /dev/null | head -n 1 | grep -e 'version [0-9]\.[0-9]\(\.[0-9]\)\?' -o | grep -e '[0-9]\.[0-9]\(\.[0-9]\)\?' -o | tail -n 1)
+CLANG_VERSION    := $(shell $(TOOLCHAIN)$(subst @,,$(CC))  --version  2> /dev/null | head -n 1 | grep -e 'version [0-9]\.[0-9]\(\.[0-9]\)\?' -o | grep -e '[0-9]\.[0-9]\(\.[0-9]\)\?' -o | tail -n 1)
 endif
 PYTHON_AVAILABLE := $(shell $(PYTHON) --version > /dev/null 2>&1 && echo python)
 endif
diff --git a/scripts/genie.lua b/scripts/genie.lua
index a51c3cb..0811088 100644
--- a/scripts/genie.lua
+++ b/scripts/genie.lua
@@ -198,6 +198,11 @@ newoption {
 }
 
 newoption {
+	trigger = "TOOLCHAIN",
+	description = "Toolchain prefix"
+}
+
+newoption {
 	trigger = "PROFILE",
 	description = "Enable profiling.",
 }
@@ -427,6 +432,10 @@ if(_OPTIONS["USE_BGFX"]~=nil) then
 	USE_BGFX = tonumber(_OPTIONS["USE_BGFX"])
 end
 
+if(_OPTIONS["TOOLCHAIN"] == nil) then
+	_OPTIONS['TOOLCHAIN'] = ""
+end
+
 GEN_DIR = MAME_BUILD_DIR .. "generated/"
 
 if (_OPTIONS["target"] == nil) then return false end
diff --git a/scripts/src/osd/sdl.lua b/scripts/src/osd/sdl.lua
index fd8cf22..6a63e7c 100644
--- a/scripts/src/osd/sdl.lua
+++ b/scripts/src/osd/sdl.lua
@@ -106,7 +106,7 @@ end
 
 function sdlconfigcmd()
 	if not _OPTIONS["SDL_INSTALL_ROOT"] then
-		return _OPTIONS["SDL_LIBVER"] .. "-config"
+		return _OPTIONS['TOOLCHAIN'] .. "pkg-config " .. _OPTIONS["SDL_LIBVER"]
 	else
 		return path.join(_OPTIONS["SDL_INSTALL_ROOT"],"bin",_OPTIONS["SDL_LIBVER"]) .. "-config"
 	end
diff --git a/scripts/toolchain.lua b/scripts/toolchain.lua
index 7fad61c..d7517e8e 100644
--- a/scripts/toolchain.lua
+++ b/scripts/toolchain.lua
@@ -4,6 +4,11 @@
 --
 
 local naclToolchain = ""
+local toolchainPrefix = ""
+
+if _OPTIONS['TOOLCHAIN'] then
+	toolchainPrefix = _OPTIONS["TOOLCHAIN"]
+end
 
 newoption {
 	trigger = "gcc",
@@ -204,15 +209,18 @@ function toolchain(_buildDir, _subDir)
 			if not os.getenv("MINGW32") then
 				print("Set MINGW32 envrionment variable.")
 			end
-			premake.gcc.cc  = "$(MINGW32)/bin/i686-w64-mingw32-gcc"
-			premake.gcc.cxx = "$(MINGW32)/bin/i686-w64-mingw32-g++"
+			if not toolchainPrefix then
+				toolchainPrefix = "$(MINGW32)/bin/i686-w64-mingw32-"
+			end
+			premake.gcc.cc  = toolchainPrefix .. "gcc"
+			premake.gcc.cxx = toolchainPrefix .. "g++"
 -- work around GCC 4.9.2 not having proper linker for LTO=1 usage
 			local version_4_ar = str_to_version(_OPTIONS["gcc_version"])
 			if (version_4_ar < 50000) then
-				premake.gcc.ar  = "$(MINGW32)/bin/ar"
+				premake.gcc.ar  = toolchainPrefix .. "ar"
 			end
 			if (version_4_ar >= 50000) then
-				premake.gcc.ar  = "$(MINGW32)/bin/gcc-ar"
+				premake.gcc.ar  = toolchainPrefix .. "gcc-ar"
 			end
 			location (_buildDir .. "projects/" .. _subDir .. "/".. _ACTION .. "-mingw32-gcc")
 		end
@@ -221,20 +229,22 @@ function toolchain(_buildDir, _subDir)
 			if not os.getenv("MINGW64") then
 				print("Set MINGW64 envrionment variable.")
 			end
-			premake.gcc.cc  = "$(MINGW64)/bin/x86_64-w64-mingw32-gcc"
-			premake.gcc.cxx = "$(MINGW64)/bin/x86_64-w64-mingw32-g++"
+			if not toolchainPrefix then
+				toolchainPrefix = "$(MINGW64)/bin/x86_64-w64-mingw32-"
+			end
+			premake.gcc.cc  = toolchainPrefix .. "gcc"
+			premake.gcc.cxx = toolchainPrefix .. "g++"
 -- work around GCC 4.9.2 not having proper linker for LTO=1 usage
 			local version_4_ar = str_to_version(_OPTIONS["gcc_version"])
 			if (version_4_ar < 50000) then
-				premake.gcc.ar  = "$(MINGW64)/bin/ar"
+				premake.gcc.ar  = toolchainPrefix .. "ar"
 			end
 			if (version_4_ar >= 50000) then
-				premake.gcc.ar  = "$(MINGW64)/bin/gcc-ar"
+				premake.gcc.ar  = toolchainPrefix .. "gcc-ar"
 			end
 			location (_buildDir .. "projects/" .. _subDir .. "/".. _ACTION .. "-mingw64-gcc")
 		end
 
-
 		if "mingw-clang" == _OPTIONS["gcc"] then
 			premake.gcc.cc   = "clang"
 			premake.gcc.cxx  = "clang++"
@@ -283,18 +293,17 @@ function toolchain(_buildDir, _subDir)
 
 		if "osx" == _OPTIONS["gcc"] then
 			if os.is("linux") then
-				local osxToolchain = "x86_64-apple-darwin13-"
-				premake.gcc.cc  = osxToolchain .. "clang"
-				premake.gcc.cxx = osxToolchain .. "clang++"
-				premake.gcc.ar  = osxToolchain .. "ar"
+				premake.gcc.cc  = toolchainPrefix .. "clang"
+				premake.gcc.cxx = toolchainPrefix .. "clang++"
+				premake.gcc.ar  = toolchainPrefix .. "ar"
 			end
 			location (_buildDir .. "projects/" .. _subDir .. "/".. _ACTION .. "-osx")
 		end
 
 		if "osx-clang" == _OPTIONS["gcc"] then
-			premake.gcc.cc  = "clang"
-			premake.gcc.cxx = "clang++"
-			premake.gcc.ar  = "ar"
+			premake.gcc.cc  = toolchainPrefix .. "clang"
+			premake.gcc.cxx = toolchainPrefix .. "clang++"
+			premake.gcc.ar  = toolchainPrefix .. "ar"
 			location (_buildDir .. "projects/" .. _subDir .. "/".. _ACTION .. "-osx-clang")
 		end
 
@@ -909,7 +918,6 @@ function toolchain(_buildDir, _subDir)
 end
 
 function strip()
-
 	configuration { "android-arm", "Release" }
 		postbuildcommands {
 			"$(SILENT) echo Stripping symbols.",
@@ -937,13 +945,12 @@ function strip()
 	configuration { "mingw*", "x64", "Release" }
 		postbuildcommands {
 			"$(SILENT) echo Stripping symbols.",
-			"$(SILENT) $(MINGW64)/bin/strip -s \"$(TARGET)\"",
+			"$(SILENT) " .. (_OPTIONS['TOOLCHAIN'] and toolchainPrefix or "$(MINGW64)/bin/") .. "strip -s \"$(TARGET)\"",
 		}
-
 	configuration { "mingw*", "x32", "Release" }
 		postbuildcommands {
 			"$(SILENT) echo Stripping symbols.",
-			"$(SILENT) $(MINGW32)/bin/strip -s \"$(TARGET)\""
+			"$(SILENT) " .. (_OPTIONS['TOOLCHAIN'] and toolchainPrefix or "$(MINGW32)/bin/") .. "strip -s \"$(TARGET)\"",
 		}
 
 	configuration { "pnacl" }
-- 
2.4.3

