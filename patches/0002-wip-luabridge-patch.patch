From 31928e0a504505489c5c63219b1e3aa76b895c1e Mon Sep 17 00:00:00 2001
From: Jeffrey Clark <dude@zaplabs.com>
Date: Wed, 30 Mar 2016 08:24:34 -0500
Subject: [PATCH 02/17] wip luabridge patch

Signed-off-by: Jeffrey Clark <dude@zaplabs.com>
---
 .../luabridge/Source/LuaBridge/RefCountedPtr.h     |   6 +
 .../luabridge/Source/LuaBridge/detail/CFunctions.h | 210 +++++++++++++++++----
 .../luabridge/Source/LuaBridge/detail/Iterator.h   |   4 +-
 .../luabridge/Source/LuaBridge/detail/LuaHelpers.h |   7 +
 .../luabridge/Source/LuaBridge/detail/LuaRef.h     |  46 +++--
 .../luabridge/Source/LuaBridge/detail/Namespace.h  |  33 +++-
 3rdparty/luabridge/Source/LuaBridge/detail/Stack.h | 132 ++++++++++++-
 .../luabridge/Source/LuaBridge/detail/TypeTraits.h |  10 +
 .../luabridge/Source/LuaBridge/detail/Userdata.h   | 172 ++++++++++++++++-
 3rdparty/luabridge/Source/LuaBridge/detail/dump.h  |   2 +-
 10 files changed, 560 insertions(+), 62 deletions(-)

diff --git a/3rdparty/luabridge/Source/LuaBridge/RefCountedPtr.h b/3rdparty/luabridge/Source/LuaBridge/RefCountedPtr.h
index 7c27ca4..9f27528 100644
--- a/3rdparty/luabridge/Source/LuaBridge/RefCountedPtr.h
+++ b/3rdparty/luabridge/Source/LuaBridge/RefCountedPtr.h
@@ -34,8 +34,12 @@
 # include <hash_map>
 #else
 # include <stdint.h>
+#ifdef __GNUC__
+# include <unordered_map>
+#else
 # include <ext/hash_map>
 #endif
+#endif
 
 //==============================================================================
 /**
@@ -46,6 +50,8 @@ struct RefCountedPtrBase
   // Declaration of container for the refcounts
 #ifdef _MSC_VER
   typedef stdext::hash_map <const void *, int> RefCountsType;
+#elif __GNUC__
+  typedef std::unordered_map <const void *, int> RefsCountsType;
 #else
   struct ptr_hash
   {
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/CFunctions.h b/3rdparty/luabridge/Source/LuaBridge/detail/CFunctions.h
index 0497b6b..02fe952 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/CFunctions.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/CFunctions.h
@@ -212,11 +212,20 @@ struct CFunc
     typedef typename FuncTraits <FnPtr>::Params Params;
     static int f (lua_State* L)
     {
-      assert (isfulluserdata (L, lua_upvalueindex (1)));
-      FnPtr const& fnptr = *static_cast <FnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
-      assert (fnptr != 0);
-      ArgList <Params> args (L);
-      Stack <typename FuncTraits <FnPtr>::ReturnType>::push (L, FuncTraits <FnPtr>::call (fnptr, args));
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        FnPtr const& fnptr = *static_cast <FnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        ArgList <Params> args (L);
+        Stack <typename FuncTraits <FnPtr>::ReturnType>::push (L, FuncTraits <FnPtr>::call (fnptr, args));
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+      }
       return 1;
     }
   };
@@ -236,11 +245,20 @@ struct CFunc
     typedef typename FuncTraits <FnPtr>::Params Params;
     static int f (lua_State* L)
     {
-      assert (isfulluserdata (L, lua_upvalueindex (1)));
-      FnPtr const& fnptr = *static_cast <FnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
-      assert (fnptr != 0);
-      ArgList <Params> args (L);
-      FuncTraits <FnPtr>::call (fnptr, args);
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        FnPtr const& fnptr = *static_cast <FnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        ArgList <Params> args (L);
+        FuncTraits <FnPtr>::call (fnptr, args);
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+      }
       return 0;
     }
   };
@@ -261,12 +279,21 @@ struct CFunc
 
     static int f (lua_State* L)
     {
-      assert (isfulluserdata (L, lua_upvalueindex (1)));
-      T* const t = Userdata::get <T> (L, 1, false);
-      MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
-      assert (fnptr != 0);
-      ArgList <Params, 2> args (L);
-      Stack <ReturnType>::push (L, FuncTraits <MemFnPtr>::call (t, fnptr, args));
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        T* const t = Userdata::get <T> (L, 1, false);
+        MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        ArgList <Params, 2> args (L);
+        Stack <ReturnType>::push (L, FuncTraits <MemFnPtr>::call (t, fnptr, args));
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+      }
       return 1;
     }
   };
@@ -280,12 +307,49 @@ struct CFunc
 
     static int f (lua_State* L)
     {
-      assert (isfulluserdata (L, lua_upvalueindex (1)));
-      T const* const t = Userdata::get <T> (L, 1, true);
-      MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
-      assert (fnptr != 0);
-      ArgList <Params, 2> args(L);
-      Stack <ReturnType>::push (L, FuncTraits <MemFnPtr>::call (t, fnptr, args));
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        T const* const t = Userdata::get <T> (L, 1, true);
+        MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        ArgList <Params, 2> args(L);
+        Stack <ReturnType>::push (L, FuncTraits <MemFnPtr>::call (t, fnptr, args));
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+      }
+      return 1;
+    }
+  };
+
+  template <class MemFnPtr, class T,
+            class ReturnType = typename FuncTraits <MemFnPtr>::ReturnType>
+  struct CallMemberProxy
+  {
+    typedef typename FuncTraits <MemFnPtr>::Params Params;
+
+    static int f (lua_State* L)
+    {
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        T* const t = Userdata::get <T> (L, 1, false);
+        MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        // first arg is the userdata <table> itself, so the call works passing the object as first parameter
+        ArgList <Params, 1> args (L);
+        Stack <ReturnType>::push (L, FuncTraits <MemFnPtr>::call (fnptr, args));
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+      }
       return 1;
     }
   };
@@ -305,12 +369,21 @@ struct CFunc
 
     static int f (lua_State* L)
     {
-      assert (isfulluserdata (L, lua_upvalueindex (1)));
-      T* const t = Userdata::get <T> (L, 1, false);
-      MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
-      assert (fnptr != 0);
-      ArgList <Params, 2> args (L);
-      FuncTraits <MemFnPtr>::call (t, fnptr, args);
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        T* const t = Userdata::get <T> (L, 1, false);
+        MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        ArgList <Params, 2> args (L);
+        FuncTraits <MemFnPtr>::call (t, fnptr, args);
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+      }
       return 0;
     }
   };
@@ -323,12 +396,48 @@ struct CFunc
 
     static int f (lua_State* L)
     {
-      assert (isfulluserdata (L, lua_upvalueindex (1)));
-      T const* const t = Userdata::get <T> (L, 1, true);
-      MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
-      assert (fnptr != 0);
-      ArgList <Params, 2> args (L);
-      FuncTraits <MemFnPtr>::call (t, fnptr, args);
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        T const* const t = Userdata::get <T> (L, 1, true);
+        MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        ArgList <Params, 2> args (L);
+        FuncTraits <MemFnPtr>::call (t, fnptr, args);
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+      }
+      return 0;
+    }
+  };
+
+  template <class MemFnPtr, class T>
+  struct CallMemberProxy <MemFnPtr, T, void>
+  {
+    typedef typename FuncTraits <MemFnPtr>::Params Params;
+
+    static int f (lua_State* L)
+    {
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        T* const t = Userdata::get <T> (L, 1, false);
+        MemFnPtr const& fnptr = *static_cast <MemFnPtr const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        // first arg is the userdata <table> itself, so the call works passing the object as the first parameter
+        ArgList <Params, 1> args (L);
+        FuncTraits <MemFnPtr>::call (fnptr, args);
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+      }
       return 0;
     }
   };
@@ -345,12 +454,22 @@ struct CFunc
   {
     static int f (lua_State* L)
     {
-      assert (isfulluserdata (L, lua_upvalueindex (1)));
-      typedef int (T::*MFP)(lua_State* L);
-      T* const t = Userdata::get <T> (L, 1, false);
-      MFP const& fnptr = *static_cast <MFP const*> (lua_touserdata (L, lua_upvalueindex (1)));
-      assert (fnptr != 0);
-      return (t->*fnptr) (L);
+      try
+      {
+        assert (isfulluserdata (L, lua_upvalueindex (1)));
+        typedef int (T::*MFP)(lua_State* L);
+        T* const t = Userdata::get <T> (L, 1, false);
+        MFP const& fnptr = *static_cast <MFP const*> (lua_touserdata (L, lua_upvalueindex (1)));
+        assert (fnptr != 0);
+        return (t->*fnptr) (L);
+      }
+      catch (std::exception& e)
+      {
+        lua_pushnil (L);
+        lua_insert (L, 1);
+        luaL_error (L, e.what());
+	return 0;
+      }
     }
   };
 
@@ -396,6 +515,17 @@ struct CFunc
     }
   };
 
+  template <class MemFnPtr, class T>
+  struct CallMemberProxyFunctionHelper
+  {
+    static void add (lua_State* L, char const* name, MemFnPtr mf)
+    {
+      new (lua_newuserdata (L, sizeof (MemFnPtr))) MemFnPtr (mf);
+      lua_pushcclosure (L, &CallMemberProxy <MemFnPtr, T>::f, 1);
+      rawsetfield (L, -3, name); // class table
+    }
+  };
+
   //--------------------------------------------------------------------------
   /**
       __gc metamethod for a class.
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/Iterator.h b/3rdparty/luabridge/Source/LuaBridge/detail/Iterator.h
index d883fb3..d27e72b 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/Iterator.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/Iterator.h
@@ -47,8 +47,8 @@ private:
     }
     else
     {
-      m_key = Nil();
-      m_value = Nil();
+      m_key = nullptr;
+      m_value = nullptr;
     }
     lua_pop(m_L, 1);
   }
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/LuaHelpers.h b/3rdparty/luabridge/Source/LuaBridge/detail/LuaHelpers.h
index 7bc84eb..46ca54f 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/LuaHelpers.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/LuaHelpers.h
@@ -93,6 +93,13 @@ inline int get_length (lua_State* L, int idx)
   return len;
 }
 
+inline lua_State* get_main_thread (lua_State* thread)
+{
+  lua_rawgeti ( thread, LUA_REGISTRYINDEX, LUA_RIDX_MAINTHREAD);
+  lua_State* L = lua_tothread (thread, -1);
+  lua_pop (thread, 1);
+  return L;
+}
 #endif
 
 #ifndef LUA_OK
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/LuaRef.h b/3rdparty/luabridge/Source/LuaBridge/detail/LuaRef.h
index e726bca..2c99403 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/LuaRef.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/LuaRef.h
@@ -38,9 +38,6 @@
         ...
         t ["k"] = Nil(); // assign nil
 */
-struct Nil
-{
-};
 
 //------------------------------------------------------------------------------
 /**
@@ -237,6 +234,7 @@ private:
     }
 
     inline bool isNil () const { return type () == LUA_TNIL; }
+    inline bool isBool () const { return type () == LUA_TBOOLEAN; }
     inline bool isNumber () const { return type () == LUA_TNUMBER; }
     inline bool isString () const { return type () == LUA_TSTRING; }
     inline bool isTable () const { return type () == LUA_TTABLE; }
@@ -245,6 +243,14 @@ private:
     inline bool isThread () const { return type () == LUA_TTHREAD; }
     inline bool isLightUserdata () const { return type () == LUA_TLIGHTUSERDATA; }
 
+    template <class T>
+    inline bool is () const
+    {
+      StackPop p (m_L, 1);
+      push (m_L);
+      return Stack <T>::is_a (m_L, lua_gettop (m_L));
+    }
+
     //--------------------------------------------------------------------------
     /**
         Perform an explicit conversion.
@@ -542,9 +548,9 @@ private:
       @note The object is popped.
   */
   LuaRef (lua_State* L, FromStack)
-    : m_L (L)
+    : m_L (get_main_thread(L))
   {
-    m_ref = luaL_ref (m_L, LUA_REGISTRYINDEX);
+    m_ref = luaL_ref (L, LUA_REGISTRYINDEX);
   }
 
   //----------------------------------------------------------------------------
@@ -557,10 +563,10 @@ private:
       @note The object is not popped.
   */
   LuaRef (lua_State* L, int index, FromStack)
-    : m_L (L)
+    : m_L (get_main_thread(L))
   {
-    lua_pushvalue (m_L, index);
-    m_ref = luaL_ref (m_L, LUA_REGISTRYINDEX);
+    lua_pushvalue (L, index);
+    m_ref = luaL_ref (L, LUA_REGISTRYINDEX);
   }
 
   //----------------------------------------------------------------------------
@@ -599,7 +605,7 @@ public:
       The LuaRef may be assigned later.
   */
   LuaRef (lua_State* L)
-    : m_L (L)
+    : m_L (get_main_thread(L))
     , m_ref (LUA_REFNIL)
   {
   }
@@ -610,7 +616,7 @@ public:
   */
   template <class T>
   LuaRef (lua_State* L, T v)
-    : m_L (L)
+    : m_L (get_main_thread(L))
   {
     Stack <T>::push (m_L, v);
     m_ref = luaL_ref (m_L, LUA_REGISTRYINDEX);
@@ -726,9 +732,12 @@ public:
     lua_getglobal (m_L, "tostring");
     push (m_L);
     lua_call (m_L, 1, 1);
-    const char* str = lua_tostring(m_L, 1);
+    const char* str = lua_tostring(m_L, -1);
     lua_pop(m_L, 1);
-    return std::string(str);
+    if (str != 0)
+        return std::string(str);
+    else
+        return std::string(str);
   }
 
   //----------------------------------------------------------------------------
@@ -851,6 +860,15 @@ public:
   inline bool isUserdata () const { return type () == LUA_TUSERDATA; }
   inline bool isThread () const { return type () == LUA_TTHREAD; }
   inline bool isLightUserdata () const { return type () == LUA_TLIGHTUSERDATA; }
+
+  template <class T>
+  inline bool is () const
+  {
+    StackPop p (m_L, 1);
+    push (m_L);
+    return Stack <T>::is_a (m_L, lua_gettop (m_L));
+  }
+
   /** @} */
 
   //----------------------------------------------------------------------------
@@ -1124,10 +1142,10 @@ private:
     Stack specialization for Nil
 */
 template <>
-struct Stack <Nil>
+struct Stack <std::nullptr_t>
 {
 public:
-  static inline void push (lua_State* L, Nil)
+  static inline void push (lua_State* L, std::nullptr_t)
   {
     lua_pushnil (L);
   }
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/Namespace.h b/3rdparty/luabridge/Source/LuaBridge/detail/Namespace.h
index ff22e6b..7236d40 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/Namespace.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/Namespace.h
@@ -790,10 +790,39 @@ private:
     /**
         Add or replace a member function.
     */
+    template <class R, class MemFn>
+    Class <T>& addFunction (char const* name, R MemFn::*mf)
+    {
+      CFunc::CallMemberFunctionHelper <R MemFn::*, FuncTraits <R MemFn::*>::isConstMemberFunction>::add (L, name, mf);
+      return *this;
+    }
+
+    //--------------------------------------------------------------------------
+    /**
+        Add or replace a member function.
+    */
+    template <class FP>
+    Class <T>& addFunction (char const* name, FP fp)
+    {
+      assert(lua_istable (L, -1));
+
+      new (lua_newuserdata (L, sizeof (fp))) FP (fp);
+      lua_pushclosure (L, &CFunc::Call <FP>::f, 1);
+      rawsetfield (L, -3, name); //class table
+      if (TypeTraits::isConst<typename FuncTraits<FP>::Params::Head>::value)
+        rawsetfield (L, -5, name); // const table
+
+      return *this;
+    }
+
+    //--------------------------------------------------------------------------
+    /**
+        Add or replace a proxy member function.
+    */
     template <class MemFn>
-    Class <T>& addFunction (char const* name, MemFn mf)
+    Class <T>& addProxyFunction (char const* name, MemFn mf)
     {
-      CFunc::CallMemberFunctionHelper <MemFn, FuncTraits <MemFn>::isConstMemberFunction>::add (L, name, mf);
+      CFunc::CallMemberProxyFunctionHelper <MemFn, T>::add (L, name, mf);
       return *this;
     }
 
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/Stack.h b/3rdparty/luabridge/Source/LuaBridge/detail/Stack.h
index 1a0aae7..203d1ad 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/Stack.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/Stack.h
@@ -56,6 +56,11 @@ struct Stack <lua_CFunction>
   {
     return lua_tocfunction (L, index);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_iscfunction (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -74,6 +79,11 @@ struct Stack <int>
   {
     return static_cast <int> (luaL_checkinteger (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <>
@@ -88,6 +98,11 @@ struct Stack <int const&>
   {
     return static_cast <int > (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 //------------------------------------------------------------------------------
 /**
@@ -105,6 +120,11 @@ struct Stack <unsigned int>
   {
     return static_cast <unsigned int> (luaL_checkinteger (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <>
@@ -119,6 +139,11 @@ struct Stack <unsigned int const&>
   {
     return static_cast <unsigned int > (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -137,6 +162,11 @@ struct Stack <unsigned char>
   {
     return static_cast <unsigned char> (luaL_checkinteger (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <>
@@ -151,6 +181,11 @@ struct Stack <unsigned char const&>
   {
     return static_cast <unsigned char> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -169,6 +204,11 @@ struct Stack <short>
   {
     return static_cast <short> (luaL_checkinteger (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <>
@@ -183,6 +223,11 @@ struct Stack <short const&>
   {
     return static_cast <short> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -201,6 +246,11 @@ struct Stack <unsigned short>
   {
     return static_cast <unsigned short> (luaL_checkinteger (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <>
@@ -215,6 +265,11 @@ struct Stack <unsigned short const&>
   {
     return static_cast <unsigned short> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -233,6 +288,11 @@ struct Stack <long>
   {
     return static_cast <long> (luaL_checkinteger (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <>
@@ -247,6 +307,11 @@ struct Stack <long const&>
   {
     return static_cast <long> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -265,6 +330,11 @@ struct Stack <unsigned long>
   {
     return static_cast <unsigned long> (luaL_checkinteger (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <>
@@ -279,6 +349,11 @@ struct Stack <unsigned long const&>
   {
     return static_cast <unsigned long> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -297,6 +372,11 @@ struct Stack <float>
   {
     return static_cast <float> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <>
@@ -311,6 +391,11 @@ struct Stack <float const&>
   {
     return static_cast <float> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -328,6 +413,11 @@ template <> struct Stack <double>
   {
     return static_cast <double> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 template <> struct Stack <double const&>
@@ -341,6 +431,11 @@ template <> struct Stack <double const&>
   {
     return static_cast <double> (luaL_checknumber (L, index));
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isnumber (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -358,6 +453,11 @@ struct Stack <bool> {
   {
     return lua_toboolean (L, index) ? true : false;
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isboolean (L, index);
+  }
 };
 
 template <>
@@ -371,6 +471,11 @@ struct Stack <bool const&> {
   {
     return lua_toboolean (L, index) ? true : false;
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isboolean (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -390,6 +495,11 @@ struct Stack <char>
   {
     return luaL_checkstring (L, index) [0];
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isstring (L, index);
+  }
 };
 
 template <>
@@ -405,6 +515,11 @@ struct Stack <char const&>
   {
     return luaL_checkstring (L, index) [0];
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isstring (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -426,6 +541,11 @@ struct Stack <char const*>
   {
     return lua_isnil (L, index) ? 0 : luaL_checkstring (L, index);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isstring (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -446,6 +566,11 @@ struct Stack <std::string>
     const char *str = luaL_checklstring(L, index, &len);
     return std::string (str, len);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isstring (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -457,7 +582,7 @@ struct Stack <std::string const&>
 {
   static inline void push (lua_State* L, std::string const& str)
   {
-    lua_pushstring (L, str.c_str());
+    lua_pushlstring (L, str.c_str(), str.size());
   }
 
   static inline std::string get (lua_State* L, int index)
@@ -466,4 +591,9 @@ struct Stack <std::string const&>
     const char *str = luaL_checklstring(L, index, &len);
     return std::string (str, len);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return lua_isstring (L, index);
+  }
 };
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/TypeTraits.h b/3rdparty/luabridge/Source/LuaBridge/detail/TypeTraits.h
index 5dd0771..00c3d87 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/TypeTraits.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/TypeTraits.h
@@ -59,6 +59,16 @@ struct ContainerTraits
   typedef bool isNotContainer;
 };
 
+template <class C>
+struct ContainerConstructionTraits
+{
+  typedef typename ContainerTraits<C>::Type T;
+  static C constructContainer(T *t)
+  {
+    return C(t);
+  }
+};
+
 //------------------------------------------------------------------------------
 /**
     Type traits.
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/Userdata.h b/3rdparty/luabridge/Source/LuaBridge/detail/Userdata.h
index 19451bd..67e140b 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/Userdata.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/Userdata.h
@@ -68,7 +68,7 @@ protected:
   /**
     Get an untyped pointer to the contained class.
   */
-  inline void* const getPointer ()
+  virtual void* const getPointer ()
   {
     return m_p;
   }
@@ -288,6 +288,97 @@ ud __parent (nil)
     return ud;
   }
 
+  static bool checkClass (lua_State* L,
+		  int index,
+		  void const* baseClassKey,
+		  bool canBeConst)
+  {
+    assert (index > 0);
+
+    bool mismatch = false;
+
+    lua_rawgetp (L, LUA_REGISTRYINDEX, baseClassKey);
+    assert (lua_istable (L, -1));
+
+    // Make sure we have a userdata
+    if (lua_isuserdata (L, index))
+    {
+      // Make sure it's metatable is ours.
+      lua_getmetatable (L, index);
+      lua_rawgetp (L, -1, getIdentityKey ());
+      if (lua_isboolean (L, -1))
+      {
+        lua_pop (L, 1);
+
+	// If __const is present, object is NOT const.
+	rawgetfield (L, -1, "__const");
+	assert (lua_istable (L, -1) || lua_isnil (L, -1));
+	bool const isConst = lua_isnil (L, -1);
+	lua_pop (L, 1);
+
+	// Replace the class table with the const table if needed.
+	if (isConst)
+        {
+          rawgetfield (L, -2, "__const");
+	  assert (lua_istable (L, -1));
+	  lua_replace (L, -3);
+	}
+
+	for (;;)
+	{
+          if (lua_rawequal (L, -1, -2))
+          {
+            lua_pop (L, 2);
+
+	    // Match, now check const-ness.
+	    if (isConst && !canBeConst)
+	    {
+              luaL_argerror (L, index, "cannot be const");
+	    }
+	    else
+	    {
+	      break;
+	    }
+          }
+	  else
+          {
+            // Replace current metatable with it's base class.
+	    rawgetfield (L, -1, "__parent");
+	    /*
+	     * ud
+	     * class metatable
+	     * ud metatable
+	     * ud __parent (nil)
+	     */
+            if (lua_isnil (L, -1))
+	    {
+	      lua_remove (L, -1);
+	      lua_pop (L, 2);
+	      mismatch = true;
+	      break;
+	    }
+	    else
+	    {
+              lua_remove (L, -2);
+	    }
+	  }
+	}
+      }
+      else
+      {
+        lua_pop (L, 2);
+        mismatch = true;
+      }
+    }
+    else
+    {
+      lua_pop (L, 1);
+      mismatch = true;
+    }
+
+     return !mismatch;
+  }
+
 public:
   virtual ~Userdata () { }
 
@@ -319,6 +410,16 @@ public:
       return static_cast <T*> (getClass (L, index,
         ClassInfo <T>::getClassKey (), canBeConst)->getPointer ());
   }
+
+  template <class T>
+  static inline bool check (lua_State* L, int index, bool canBeConst)
+  {
+    if (lua_isnil (L, index))
+      return false;
+    else
+      return checkClass (L, index, ClassInfo <T>::getClassKey (), canBeConst);
+  }
+
 };
 
 //----------------------------------------------------------------------------
@@ -514,6 +615,12 @@ public:
     m_p = const_cast <void*> (reinterpret_cast <void const*> (
         (ContainerTraits <C>::get (m_c))));
   }
+
+  virtual void* const getPointer ()
+  {
+    return const_cast <void*> (reinterpret_cast <void const*> (
+        (ContainerTraits <C>::get (m_c))));
+  }
 };
 
 //----------------------------------------------------------------------------
@@ -624,8 +731,16 @@ struct StackHelper
 
   static inline C get (lua_State* L, int index)
   {
-    return Userdata::get <T> (L, index, true);
+    return ContainerConstructionTraits<C>::constructContainer(
+      Userdata::get <T> (L, index, true)
+    );
+  }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, true);
   }
+
 };
 
 /**
@@ -647,6 +762,12 @@ struct StackHelper <T, false>
   {
     return *Userdata::get <T> (L, index, true);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, true);
+  }
+
 };
 
 //==============================================================================
@@ -669,6 +790,12 @@ public:
     return StackHelper <T,
       TypeTraits::isContainer <T>::value>::get (L, index);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return StackHelper <T,
+      TypeTraits::isContainer <T>::value>::is_a (L, index);
+  }
 };
 
 //------------------------------------------------------------------------------
@@ -693,6 +820,11 @@ struct Stack <T*>
   {
     return Userdata::get <T> (L, index, false);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, false);
+  }
 };
 
 // Strips the const off the right side of *
@@ -708,6 +840,11 @@ struct Stack <T* const>
   {
     return Userdata::get <T> (L, index, false);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, false);
+  }
 };
 
 // pointer to const
@@ -723,6 +860,11 @@ struct Stack <T const*>
   {
     return Userdata::get <T> (L, index, true);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, true);
+  }
 };
 
 // Strips the const off the right side of *
@@ -738,6 +880,11 @@ struct Stack <T const* const>
   {
     return Userdata::get <T> (L, index, true);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, true);
+  }
 };
 
 // reference
@@ -756,6 +903,11 @@ struct Stack <T&>
       luaL_error (L, "nil passed to reference");
     return *t;
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, false);
+  }
 };
 
 template <class C, bool byContainer>
@@ -776,6 +928,11 @@ struct RefStackHelper
   {
     return Userdata::get <T> (L, index, true);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, true);
+  }
 };
 
 template <class T>
@@ -796,6 +953,11 @@ struct RefStackHelper <T, false>
       luaL_error (L, "nil passed to reference");
     return *t;
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return Userdata::check <T> (L, index, true);
+  }
     
 };
 
@@ -814,4 +976,10 @@ struct Stack <T const&>
   {
     return helper_t::get (L, index);
   }
+
+  static inline bool is_a (lua_State* L, int index)
+  {
+    return helper_t::is_a (L, index);
+  }
+
 };
diff --git a/3rdparty/luabridge/Source/LuaBridge/detail/dump.h b/3rdparty/luabridge/Source/LuaBridge/detail/dump.h
index c066803..0b41b09 100644
--- a/3rdparty/luabridge/Source/LuaBridge/detail/dump.h
+++ b/3rdparty/luabridge/Source/LuaBridge/detail/dump.h
@@ -1,7 +1,7 @@
 #include <sstream>
 #include <string>
 
-std::string dumpLuaState(lua_State *L) {
+inline std::string dumpLuaState(lua_State *L) {
 	std::stringstream ostr;
 	int i;
 	int top = lua_gettop(L);
-- 
2.8.0

