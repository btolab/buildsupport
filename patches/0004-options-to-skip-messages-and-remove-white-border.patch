From 8ad6e2b42ef5d83dd03f44fa4968b2a6b4af916e Mon Sep 17 00:00:00 2001
From: Jeffrey Clark <dude@zaplabs.com>
Date: Sat, 30 Apr 2016 23:13:55 -0500
Subject: [PATCH 04/11] options to skip messages and remove white border

---
 src/emu/emuopts.cpp            | 3 +++
 src/emu/emuopts.h              | 6 ++++++
 src/emu/render.cpp             | 5 ++++-
 src/emu/render.h               | 1 +
 src/frontend/mame/ui/submenu.h | 3 +++
 src/frontend/mame/ui/ui.cpp    | 6 +++++-
 6 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/src/emu/emuopts.cpp b/src/emu/emuopts.cpp
index 180de1a..b55af2b 100644
--- a/src/emu/emuopts.cpp
+++ b/src/emu/emuopts.cpp
@@ -190,6 +190,9 @@ const options_entry emu_options::s_option_entries[] =
 	{ OPTION_BIOS,                                       nullptr,        OPTION_STRING,     "select the system BIOS to use" },
 	{ OPTION_CHEAT ";c",                                 "0",         OPTION_BOOLEAN,    "enable cheat subsystem" },
 	{ OPTION_SKIP_GAMEINFO,                              "0",         OPTION_BOOLEAN,    "skip displaying the information screen at startup" },
+	{ OPTION_SKIP_WARNINGS,                              "0",         OPTION_BOOLEAN,    "skip warning screen" },
+	{ OPTION_SKIP_LOADING,                               "0",         OPTION_BOOLEAN,    "skip loading screen" },
+	{ OPTION_RENDER_BORDER,                              "0",         OPTION_BOOLEAN,    "render white border around UI screens" },
 	{ OPTION_UI_FONT,                                    "default",   OPTION_STRING,     "specify a font to use" },
 	{ OPTION_UI,                                         "cabinet",   OPTION_STRING,     "type of UI (simple|cabinet)" },
 	{ OPTION_RAMSIZE ";ram",                             nullptr,        OPTION_STRING,     "size of RAM (if supported by driver)" },
diff --git a/src/emu/emuopts.h b/src/emu/emuopts.h
index 900d162..867b48a 100644
--- a/src/emu/emuopts.h
+++ b/src/emu/emuopts.h
@@ -165,6 +165,9 @@
 #define OPTION_BIOS                 "bios"
 #define OPTION_CHEAT                "cheat"
 #define OPTION_SKIP_GAMEINFO        "skip_gameinfo"
+#define OPTION_SKIP_WARNINGS        "skip_warnings"
+#define OPTION_SKIP_LOADING         "skip_loading"
+#define OPTION_RENDER_BORDER        "render_border"
 #define OPTION_UI_FONT              "uifont"
 #define OPTION_UI                   "ui"
 #define OPTION_RAMSIZE              "ramsize"
@@ -347,6 +350,9 @@ public:
 	const char *bios() const { return value(OPTION_BIOS); }
 	bool cheat() const { return bool_value(OPTION_CHEAT); }
 	bool skip_gameinfo() const { return bool_value(OPTION_SKIP_GAMEINFO); }
+	bool skip_warnings() const { return bool_value(OPTION_SKIP_WARNINGS); }
+	bool skip_loading() const { return bool_value(OPTION_SKIP_LOADING); }
+	bool render_border() const { return bool_value(OPTION_RENDER_BORDER); }
 	const char *ui_font() const { return value(OPTION_UI_FONT); }
 	const char *ui() const { return value(OPTION_UI); }
 	const char *ram_size() const { return value(OPTION_RAMSIZE); }
diff --git a/src/emu/render.cpp b/src/emu/render.cpp
index 22f23d3..b43d3e3 100644
--- a/src/emu/render.cpp
+++ b/src/emu/render.cpp
@@ -1384,7 +1384,7 @@ render_primitive_list &render_target::get_primitives()
 		}
 
 	// if we are not in the running stage, draw an outer box
-	else
+	else if (m_draw_outer_box)
 	{
 		render_primitive *prim = list.alloc(render_primitive::QUAD);
 		set_render_bounds_xy(&prim->bounds, 0.0f, 0.0f, (float)m_width, (float)m_height);
@@ -1536,6 +1536,9 @@ void render_target::resolve_tags()
 			view.resolve_tags();
 		}
 	}
+
+	// white box
+	m_draw_outer_box = m_manager.machine().options().render_border();
 }
 
 
diff --git a/src/emu/render.h b/src/emu/render.h
index ccc0c5f..b87ca98 100644
--- a/src/emu/render.h
+++ b/src/emu/render.h
@@ -1024,6 +1024,7 @@ private:
 	layout_view *           m_base_view;                // the view at the time of first frame
 	int                     m_base_orientation;         // the orientation at the time of first frame
 	render_layer_config     m_base_layerconfig;         // the layer configuration at the time of first frame
+	bool                    m_draw_outer_box;           // white box
 	int                     m_maxtexwidth;              // maximum width of a texture
 	int                     m_maxtexheight;             // maximum height of a texture
 	simple_list<render_container> m_debug_containers;   // list of debug containers
diff --git a/src/frontend/mame/ui/submenu.h b/src/frontend/mame/ui/submenu.h
index be095c7..4d2028a 100644
--- a/src/frontend/mame/ui/submenu.h
+++ b/src/frontend/mame/ui/submenu.h
@@ -70,6 +70,9 @@ static std::vector<ui_submenu::option> misc_submenu_options = {
 	{ ui_submenu::UI,   __("Use image as background"),                 OPTION_USE_BACKGROUND },
 	{ ui_submenu::UI,   __("Skip bios selection menu"),                OPTION_SKIP_BIOS_MENU },
 	{ ui_submenu::UI,   __("Skip software parts selection menu"),      OPTION_SKIP_PARTS_MENU },
+	{ ui_submenu::EMU,  __("Skip warnings"),                           OPTION_SKIP_WARNINGS },
+	{ ui_submenu::EMU,  __("Skip loading"),                            OPTION_SKIP_LOADING },
+	{ ui_submenu::EMU,  __("Render border"),                           OPTION_RENDER_BORDER },
 	{ ui_submenu::UI,   __("Info auto audit"),                         OPTION_INFO_AUTO_AUDIT },
 };
 
diff --git a/src/frontend/mame/ui/ui.cpp b/src/frontend/mame/ui/ui.cpp
index 0359030..ea23715 100644
--- a/src/frontend/mame/ui/ui.cpp
+++ b/src/frontend/mame/ui/ui.cpp
@@ -397,11 +397,12 @@ void mame_ui_manager::display_startup_screens(bool first_time)
 			case 0:
 				if (show_warnings && warnings_string(messagebox_text).length() > 0)
 				{
-					set_handler(handler_messagebox_anykey, 0);
 					if (machine().system().flags & (MACHINE_WRONG_COLORS | MACHINE_IMPERFECT_COLORS | MACHINE_REQUIRES_ARTWORK | MACHINE_IMPERFECT_GRAPHICS | MACHINE_IMPERFECT_SOUND | MACHINE_IMPERFECT_KEYBOARD | MACHINE_NO_SOUND))
 						messagebox_backcolor = UI_YELLOW_COLOR;
 					if (machine().system().flags & (MACHINE_NOT_WORKING | MACHINE_UNEMULATED_PROTECTION | MACHINE_MECHANICAL))
 						messagebox_backcolor = UI_RED_COLOR;
+					if (messagebox_backcolor == UI_RED_COLOR || !machine().options().skip_warnings())
+						set_handler(handler_messagebox_anykey, 0);
 				}
 				break;
 
@@ -451,6 +452,9 @@ void mame_ui_manager::set_startup_text(const char *text, bool force)
 	static osd_ticks_t lastupdatetime = 0;
 	osd_ticks_t curtime = osd_ticks();
 
+	if (machine().options().skip_loading())
+		return;
+
 	// copy in the new text
 	messagebox_text.assign(text);
 	messagebox_backcolor = UI_BACKGROUND_COLOR;
-- 
2.4.11

